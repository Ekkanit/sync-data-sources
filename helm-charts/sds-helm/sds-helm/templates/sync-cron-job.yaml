{{- $skipCron := .Values.skipCron -}}
{{ if not $skipCron }}
{{- $root := . -}}
{{- $nodeIdx := .Values.nodeIdx -}}
{{- range $nIdx := untilStep 0 (.Values.nodeNum|int) 1 -}}
{{ if or (not $nodeIdx) (eq $nIdx ($nodeIdx|int)) }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  namespace: '{{ $root.Values.namespace }}'
  name: '{{ $root.Values.syncPodName }}-{{ $nIdx }}'
  labels:
    type: 'cron'
{{- with $root.Values.labels -}}
{{ toYaml . | nindent 4 }}
{{ end }}
    app.kubernetes.io/instance: sds
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: sds
spec:
  schedule: '{{ $root.Values.schedule }}'
  concurrencyPolicy: {{ $root.Values.concurrencyPolicy }}
  jobTemplate:
    spec:
      template:
        metadata:
          name: '{{ $root.Values.syncPodName }}-{{ $nIdx }}'
          labels:
            type: 'sds'
{{- with $root.Values.labels -}}
{{ toYaml . | nindent 12 }}
{{ end }}
            app.kubernetes.io/instance: sds
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: sds
        spec:
{{ if gt ($root.Values.nodeNum|int) 1 }}
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: type
                    operator: In
                    values:
                    - sds
                topologyKey: kubernetes.io/hostname
{{ end }}
          containers:
          - command:
            - {{ $root.Values.syncCommand }}
{{ if $root.Values.syncCommandArgs }}
            args:
{{- with $root.Values.syncCommandArgs -}}
{{ toYaml . | nindent 14 }}
{{ end }}
{{ end }}
{{ if $root.Values.useResourcesLimits }}
            resources:
              requests:
                memory: '{{ $root.Values.requestsMemory }}'
                cpu: '{{ $root.Values.requestsCPU }}'
              limits:
                memory: '{{ $root.Values.limitsMemory }}'
                cpu: '{{ $root.Values.limitsCPU }}'
{{ end }}
            env:
            - name: SDS_DRY_RUN
              value: '{{ $root.Values.dryRun }}'
            - name: SDS_DRY_RUN_CODE
              value: '{{ $root.Values.dryRunCode }}'
            - name: SDS_DRY_RUN_SECONDS
              value: '{{ $root.Values.dryRunSeconds }}'
            - name: SDS_TIMEOUT_SECONDS
              value: '{{ $root.Values.timeoutSeconds }}'
            - name: SDS_N_LONGEST
              value: '{{ $root.Values.nLongest }}'
            - name: SDS_STRIP_ERROR_SIZE
              value: '{{ $root.Values.stripErrorSize }}'
            - name: SDS_SKIP_SH
              value: '{{ $root.Values.skipSH }}'
            - name: SDS_SKIP_DATA
              value: '{{ $root.Values.skipData }}'
            - name: SDS_SKIP_AFFS
              value: '{{ $root.Values.skipAffs }}'
            - name: SDS_NODE_HASH
              value: '{{ $root.Values.nodeHash }}'
            - name: SDS_NODE_NUM
              value: '{{ $root.Values.nodeNum }}'
            - name: SDS_NODE_IDX
              value: '{{ $nIdx }}'
            - name: SDS_MAXRETRY
              value: '{{ $root.Values.sdsMaxRetry }}'
            - name: SDS_DEBUG
              value: '{{ $root.Values.sdsDebug }}'
            - name: SDS_CMDDEBUG
              value: '{{ $root.Values.sdsCmdDebug }}'
            - name: SDS_ST
              value: '{{ $root.Values.sdsST }}'
            - name: SDS_NCPUS
              value: '{{ $root.Values.sdsNCPUs }}'
            - name: SDS_CTXOUT
              value: '{{ $root.Values.sdsCtxOut }}'
            - name: SDS_SKIPTIME
              value: '{{ $root.Values.sdsSkipTime }}'
            - name: SDS_ES_BULKSIZE
              value: '{{ $root.Values.esBulkSize }}'
            - name: SDS_LATEST_ITEMS
              value: '{{ $root.Values.latestItems }}'
            - name: SDS_SCROLL_WAIT
              value: '{{ $root.Values.scrollWait }}'
            - name: SDS_SCROLL_SIZE
              value: '{{ $root.Values.scrollSize }}'
            - name: SDS_SILENT
              value: '{{ $root.Values.silent }}'
            - name: BRANCH
              value: '{{ $root.Values.deployEnv }}'
            - name: SH_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.shSecret }}
                  key: SH_USER.secret
            - name: SH_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.shSecret }}
                  key: SH_HOST.secret
            - name: SH_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.shSecret }}
                  key: SH_PORT.secret
            - name: SH_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.shSecret }}
                  key: SH_PASS.secret
            - name: SH_DB
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.shSecret }}
                  key: SH_DB.secret
            - name: SDS_ES_URL
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.esSecret }}
                  key: ES_URL.secret
            - name: SDS_GITHUB_OAUTH
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.githubSecret }}
                  key: GITHUB_OAUTH.secret
            - name: ZIPPASS
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.zipSecret }}
                  key: ZIPPASS.secret
{{ if $root.Values.useRepoAccess }}
            - name: REPO_ACCESS
              valueFrom:
                secretKeyRef:
                  name: {{ $root.Values.repoSecret }}
                  key: REPO_ACCESS.secret
{{ end }}
            image: '{{ $root.Values.syncImage }}-{{ $root.Values.deployEnv }}'
            imagePullPolicy: {{ $root.Values.imagePullPolicy }}
            name: '{{ $root.Values.syncPodName }}-{{ $nIdx }}'
            volumeMounts:
            - name: '{{ $root.Values.pvName }}-{{ $nIdx }}'
              mountPath: '{{ $root.Values.pvMountPath }}'
          volumes:
          - name: '{{ $root.Values.pvName }}-{{ $nIdx }}'
            persistentVolumeClaim:
              claimName: '{{ $root.Values.pvName }}-{{ $nIdx }}'
          restartPolicy: {{ $root.Values.syncRestartPolicy }}
{{ if $root.Values.useNodeSelector }}
          nodeSelector:
{{- with $root.Values.nodeSelector -}}
{{ toYaml . | nindent 12 }}
{{ end }}
{{ end }}
{{ end }}
{{ end }}
{{ end }}
